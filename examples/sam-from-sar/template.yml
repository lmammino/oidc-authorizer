# An example on how to use the authorizer from SAR in a SAM application
#
# Edit the details below and then deploy with:
#
# ```bash
# sam build --beta-features --template examples/sam-from-sar/template.yml
# sam deploy --template .aws-sam/build/template.yaml --guided --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM
# ```
#
# Clean up with:
#
# ```bash
# sam delete --config-file .aws-sam/build/samconfig.toml
# ```

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template with a simple API definition

Resources:
  # The oidc-authorizer imported from SAR
  oidcauthorizer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:795006566846:applications/oidc-authorizer
        SemanticVersion: 0.0.4 # ðŸ‘€ CHANGE ME
      Parameters:
        # ðŸ‘€ CHANGE THE FOLLOWING PARAMETERS
        AcceptedAlgorithms: ""
        AcceptedAudiences: ""
        AcceptedIssuers: ""
        DefaultPrincipalId: "unknown"
        JwksUri: "https://login.microsoftonline.com/3e4abf5a-fdc9-485c-9853-af03c4a32976/discovery/v2.0/keys"
        MinRefreshRate: "900"
        PrincipalIdClaims: "preferred_username, sub"
        # The amount of memory (in MB) to give to the authorizer Lambda.
        LambdaMemorySize: "128"
        # The timeout to give to the authorizer Lambda.
        LambdaTimeout: "3"

  # YOUR APIs HERE
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Description: A demo app to test the OIDC authorizer # ðŸ‘€ CHANGE IF NEEDED
      Auth:
        DefaultAuthorizer: OidcAuthorizer
        Authorizers:
          OidcAuthorizer:
            FunctionArn: !GetAtt oidcauthorizer.Outputs.OidcAuthorizerArn

  # ðŸ‘€ CHANGE: Define your APIs here
  SampleApiFunction1:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /1
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
      Runtime: python3.9
      Handler: index.handler
      InlineCode: |
        def handler(event, context):
            return {'body': 'Hello from endpoint1!', 'statusCode': 200}

  SampleApiFunction2:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /2
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
      Runtime: python3.9
      Handler: index.handler
      InlineCode: |
        def handler(event, context):
            return {'body': 'Hello ' + event['requestContext']['authorizer']['principalId'] + ' from endpoint2!\nThese are your claims: ' + event['requestContext']['authorizer']['jwtClaims'], 'statusCode': 200}

Outputs:
  ApiBaseUrl:
    Description: "API Gateway base URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  ApiEndpoint1:
    Description: "API Gateway endpoint 1"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/1"
  ApiEndpoint2:
    Description: "API Gateway endpoint 2"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/2"
